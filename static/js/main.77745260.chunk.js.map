{"version":3,"sources":["Components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77745260.chunk.js","sourcesContent":["import React from 'react'\r\nimport {FaTimes,FaRegCircle,FaPen} from 'react-icons/fa';\r\nfunction Icon({name}) {\r\n   switch (name) {\r\n       case 'cross':\r\n           return <FaTimes className=\"icons\"/>\r\n        case 'circle' :\r\n        return <FaRegCircle className=\"icons\"/>\r\n        default :\r\n        return <FaPen className=\"icons\"/>\r\n   }\r\n}\r\n\r\nexport default Icon","import React ,{useState} from 'react';\nimport Icon from './Components/Icon'\nimport  {Card,CardBody,Col,Container,Button,Row} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\nfunction App() {\n  const [isCross,setIsCross] = useState(false);\n  const [winMessage,setWinMessage] =useState(\"\");\n  \n  const reloadGame = () => {\n      setIsCross(false);\n      setWinMessage(\"\");\n      itemArray.fill(\"empty\",0,9);\n  }\n  const checkIsWinner = () => {\n    if(itemArray[0] !== \"empty\" && \n       itemArray[0] === itemArray[1] &&\n       itemArray[0] === itemArray[2]  )\n       {\n         setWinMessage(`${itemArray[0]} wins`);\n       } else if(itemArray[3] !== \"empty\" &&\n       itemArray[3] === itemArray[4] &&\n       itemArray[3] === itemArray[5]\n       ) {\n        setWinMessage(`${itemArray[0]} wins`);\n       } else if(itemArray[6] !== \"empty\" &&\n       itemArray[6] === itemArray[7] &&\n       itemArray[6] === itemArray[8]\n       ) {\n         setWinMessage(`${itemArray[6]} wins`);\n       } else if(itemArray[0] !== \"empty\" &&\n       itemArray[0] === itemArray[3] &&\n       itemArray[0] === itemArray[6]\n       ) {\n         setWinMessage(`${itemArray[0]} wins`);\n       } else if(\n        itemArray[1] !== \"empty\" &&\n        itemArray[1] === itemArray[4] &&\n        itemArray[1] === itemArray[7]\n       ) {\n         setWinMessage(`${itemArray[1]} wins`);\n       } else if(\n        itemArray[2] !== \"empty\" &&\n        itemArray[2] === itemArray[5] &&\n        itemArray[2] === itemArray[8]\n       ) {\n        setWinMessage(`${itemArray[2]} wins`);\n       } else if(\n        itemArray[0] !== \"empty\" &&\n        itemArray[0] === itemArray[4] &&\n        itemArray[0] === itemArray[8]\n       ) {\n         setWinMessage(`${itemArray[0]} wins`);\n       } else if(\n        itemArray[2] !== \"empty\" &&\n        itemArray[2] === itemArray[4] &&\n        itemArray[2] === itemArray[6]\n       ) {\n         setWinMessage(`${itemArray[2]} wins`)\n       }\n  }\n\n  const changeItem = itemNumber => {\n    if(winMessage) {\n      return toast(winMessage,{type:\"success\"});\n    } \n    if(itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    } else {\n      return toast(\"Already Filled\",{type:\"error\"});\n    }\n\n    checkIsWinner();\n  }\n  return (\n   <Container className=\"p-5\">\n     <ToastContainer position=\"bottom-center\"/>\n     <Row>\n       <Col md={5} className=\"offset-md-3\">\n         {winMessage ? (\n           <div className=\"mt-2 mb-2\">\n             <h1 className=\"text-warning text-center text-uppercase\">{winMessage}</h1>\n             <Button\n             color=\"success\"\n             block\n             onClick={reloadGame}\n             >Reload Game</Button>\n           </div>\n         ): ( \n           <h2 className=\"text-center text-success\"> {isCross ? \"Cross\": \"Circle\"} turns</h2>\n         )}\n         <div className=\"grid\">\n           {itemArray.map((item,index) =>(\n             <Card onClick={ () => changeItem(index)}>\n               <CardBody className='box'>\n                 <Icon name={item}/>\n               </CardBody>\n             </Card>\n           ))}\n         </div>\n       </Col>\n     </Row>\n   </Container>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}